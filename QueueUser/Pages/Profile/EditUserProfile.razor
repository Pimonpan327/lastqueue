@page "/edit-user-profile"
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@using QMS.Models
@inject IJSRuntime js
@inject TokenService TokenService
@using Radzen
@inject NotificationService NotificationService

<RadzenNotification />


<h3>แก้ไขข้อมูลส่วนตัว</h3>

@if (user == null)

{
    <p>กำลังโหลดข้อมูล...</p>
}

else

{
    <EditForm Model="@user" OnValidSubmit="SaveProfile">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- แสดงชื่อและนามสกุล -->
        <div>
            <label>ชื่อ:</label>
            <InputText @bind-Value="user.firstname" class="form-control" disabled />
        </div>
        <br />
        <div>
            <label>นามสกุล:</label>
            <InputText @bind-Value="user.lastname" class="form-control" disabled />
        </div>
        <br />
        <div>
            <label>หมายเลขบัตรประชาชน:</label>
            <InputText @bind-Value="user.citizen_id_number" class="form-control" disabled />
        </div>
        <br />
        <div>
            <label>เบอร์โทรศัพท์:</label>
            <InputText @bind-Value="user.phone_number" class="form-control" />
        </div>
        <br />
        <div>
            <label>อีเมล:</label>
            <InputText @bind-Value="user.user_email" class="form-control" />
        </div>
        <br />
        <button type="submit">บันทึกการแก้ไข</button>
    </EditForm>
}

@code {
    private NewProfile user = new NewProfile();







    protected override async Task OnAfterRenderAsync(bool firstRender)

    {

        if (firstRender)

        {

            try

            {





                var token = await TokenService.GetTokenAsync();



                if (string.IsNullOrEmpty(token) || TokenService.IsTokenExpired(token))

                {

                    await TokenService.RemoveTokenAsync();

                    Navigation.NavigateTo("/login");

                    return;

                }

                var userId = TokenService.GetUserIdFromToken(token);



                if (userId.HasValue)

                {

                    var client = HttpClientFactory.CreateClient("Queue");

                    // Set the Authorization header

                    client.DefaultRequestHeaders.Authorization =

                        new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);



                    // Fetch user profile data from API

                    var response = await client.GetAsync($"/api/User?userId={userId.Value}");



                    if (response.IsSuccessStatusCode)

                    {

                        user = await response.Content.ReadFromJsonAsync<NewProfile>();

                        StateHasChanged(); // Refresh the UI with the fetched data

                    }

                    else

                    {





                        // Handle errors such as 404 or other status codes

                        await TokenService.RemoveTokenAsync();

                        Navigation.NavigateTo("/login");

                    }

                }

                else

                {

                    await TokenService.RemoveTokenAsync();

                    Navigation.NavigateTo("/login");

                }

            }

            catch (Exception ex)

            {

                Console.WriteLine($"Error fetching user profile: {ex.Message}");

                await TokenService.RemoveTokenAsync();

                Navigation.NavigateTo("/login");

            }

        }

    }



    private async Task HandleErrorResponse(HttpResponseMessage response)

    {

        var errorMessage = await response.Content.ReadAsStringAsync();

        NotificationService.Notify(NotificationSeverity.Error, "ผิดพลาด", $"เกิดข้อผิดพลาด: {errorMessage}");

        await TokenService.RemoveTokenAsync();

        Navigation.NavigateTo("/login");

    }



    private async Task SaveProfile()

    {

        try

        {

            Console.WriteLine("กำลังบันทึกข้อมูล...");

            var client = HttpClientFactory.CreateClient("Queue");

            var response = await client.PutAsJsonAsync("/api/User", user);

            Console.WriteLine($"สถานะการตอบกลับ: {response.StatusCode}");



            if (response.IsSuccessStatusCode)

            {

                Console.WriteLine("บันทึกข้อมูลสำเร็จ");

                Navigation.NavigateTo("/profile");

                NotificationService.Notify(NotificationSeverity.Success, "สำเร็จ", "ข้อมูลของคุณถูกเปลี่ยนเรียบร้อยแล้ว");



            }

            else

            {

                await HandleErrorResponse(response);

            }

        }

        catch (Exception ex)

        {

            Console.WriteLine($"เกิดข้อผิดพลาดในการบันทึกข้อมูล: {ex.Message}");

            NotificationService.Notify(NotificationSeverity.Error, "ผิดพลาด", $"เกิดข้อผิดพลาด: {ex.Message}");

        }

    }



    private class NewProfile

    {

        public int user_id { get; set; }

        public string firstname { get; set; }

        public string lastname { get; set; }

        public string phone_number { get; set; }

        public string citizen_id_number { get; set; }

        public string user_email { get; set; }



    }
}
